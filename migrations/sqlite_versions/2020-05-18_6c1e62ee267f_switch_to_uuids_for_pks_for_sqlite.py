"""Switch to UUIDs for PKs for SQLite

Revision ID: 6c1e62ee267f
Revises: ccc37f794db6
Create Date: 2020-05-18 16:54:47.274410

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op

import pepys_import

# revision identifiers, used by Alembic.
revision = "6c1e62ee267f"
down_revision = "ccc37f794db6"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Activations", schema=None) as batch_op:
        batch_op.alter_column(
            "activation_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("Changes", schema=None) as batch_op:
        batch_op.alter_column(
            "change_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("ClassificationTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "class_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("CommentTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "comment_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Comments", schema=None) as batch_op:
        batch_op.alter_column(
            "comment_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "comment_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("CommodityTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "commodity_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("ConfidenceLevels", schema=None) as batch_op:
        batch_op.alter_column(
            "confidence_level_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("ContactTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "contact_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Contacts", schema=None) as batch_op:
        batch_op.alter_column(
            "contact_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "subject_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )

    with op.batch_alter_table("DatafileTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "datafile_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Datafiles", schema=None) as batch_op:
        batch_op.alter_column(
            "datafile_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "datafile_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("Extractions", schema=None) as batch_op:
        batch_op.alter_column(
            "extraction_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.alter_column(
            "geo_sub_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "geo_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "geometry_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "sensor_platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "subject_platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "task_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )

    with op.batch_alter_table("GeometrySubTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "geo_sub_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("GeometryTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "geo_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("HostedBy", schema=None) as batch_op:
        batch_op.alter_column(
            "host_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "hosted_by_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "subject_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("Logs", schema=None) as batch_op:
        batch_op.alter_column(
            "change_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "log_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("LogsHoldings", schema=None) as batch_op:
        batch_op.alter_column(
            "commodity_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "logs_holding_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "unit_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("Media", schema=None) as batch_op:
        batch_op.alter_column(
            "media_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "media_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "subject_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )

    with op.batch_alter_table("MediaTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "media_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Nationalities", schema=None) as batch_op:
        batch_op.alter_column(
            "nationality_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Participants", schema=None) as batch_op:
        batch_op.alter_column(
            "participant_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "task_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("PlatformTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "platform_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Platforms", schema=None) as batch_op:
        batch_op.alter_column(
            "nationality_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "platform_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("Privacies", schema=None) as batch_op:
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("SensorTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "sensor_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Sensors", schema=None) as batch_op:
        batch_op.alter_column(
            "host",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )
        batch_op.alter_column(
            "sensor_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )

    with op.batch_alter_table("States", schema=None) as batch_op:
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "state_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Synonyms", schema=None) as batch_op:
        batch_op.alter_column(
            "entity",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "synonym_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("TaggedItems", schema=None) as batch_op:
        batch_op.alter_column(
            "item_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "tag_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "tagged_by_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "tagged_item_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Tags", schema=None) as batch_op:
        batch_op.alter_column(
            "tag_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Tasks", schema=None) as batch_op:
        batch_op.alter_column(
            "parent_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "task_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("UnitTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "unit_type_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    with op.batch_alter_table("Users", schema=None) as batch_op:
        batch_op.alter_column(
            "user_id",
            existing_type=sa.INTEGER(),
            type_=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Users", schema=None) as batch_op:
        batch_op.alter_column(
            "user_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("UnitTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "unit_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Tasks", schema=None) as batch_op:
        batch_op.alter_column(
            "task_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "parent_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("Tags", schema=None) as batch_op:
        batch_op.alter_column(
            "tag_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("TaggedItems", schema=None) as batch_op:
        batch_op.alter_column(
            "tagged_item_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "tagged_by_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "tag_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "item_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("Synonyms", schema=None) as batch_op:
        batch_op.alter_column(
            "synonym_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "entity",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("States", schema=None) as batch_op:
        batch_op.alter_column(
            "state_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )

    with op.batch_alter_table("Sensors", schema=None) as batch_op:
        batch_op.alter_column(
            "sensor_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "host",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("SensorTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "sensor_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Privacies", schema=None) as batch_op:
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Platforms", schema=None) as batch_op:
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "nationality_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("PlatformTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "platform_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Participants", schema=None) as batch_op:
        batch_op.alter_column(
            "task_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "participant_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Nationalities", schema=None) as batch_op:
        batch_op.alter_column(
            "nationality_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("MediaTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "media_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Media", schema=None) as batch_op:
        batch_op.alter_column(
            "subject_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "media_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "media_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("LogsHoldings", schema=None) as batch_op:
        batch_op.alter_column(
            "unit_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "logs_holding_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "commodity_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("Logs", schema=None) as batch_op:
        batch_op.alter_column(
            "log_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "change_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("HostedBy", schema=None) as batch_op:
        batch_op.alter_column(
            "subject_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "hosted_by_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "host_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("GeometryTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "geo_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("GeometrySubTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "geo_sub_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.alter_column(
            "task_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "subject_platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "geometry_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )
        batch_op.alter_column(
            "geo_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "geo_sub_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    with op.batch_alter_table("Extractions", schema=None) as batch_op:
        batch_op.alter_column(
            "extraction_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Datafiles", schema=None) as batch_op:
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "datafile_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "datafile_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("DatafileTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "datafile_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Contacts", schema=None) as batch_op:
        batch_op.alter_column(
            "subject_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "contact_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("ContactTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "contact_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("ConfidenceLevels", schema=None) as batch_op:
        batch_op.alter_column(
            "confidence_level_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("CommodityTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "commodity_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Comments", schema=None) as batch_op:
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "platform_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "comment_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "comment_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("CommentTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "comment_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("ClassificationTypes", schema=None) as batch_op:
        batch_op.alter_column(
            "class_type_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Changes", schema=None) as batch_op:
        batch_op.alter_column(
            "change_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    with op.batch_alter_table("Activations", schema=None) as batch_op:
        batch_op.alter_column(
            "source_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "sensor_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "privacy_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "activation_id",
            existing_type=pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            type_=sa.INTEGER(),
        )

    # ### end Alembic commands ###
