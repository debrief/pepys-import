"""Rename reference table cols to name

Revision ID: e752bda39400
Revises: ccc37f794db6
Create Date: 2020-05-18 11:56:26.012057

"""
from datetime import datetime
from uuid import uuid4

from alembic import op
from sqlalchemy import Column, DateTime, MetaData, String
from sqlalchemy.ext.declarative import declarative_base

from pepys_import.core.store import constants
from pepys_import.core.store.db_base import sqlite_naming_convention
from pepys_import.core.store.db_status import TableTypes
from pepys_import.utils.sqlalchemy_utils import UUIDType

Metadata = MetaData(naming_convention=sqlite_naming_convention)
BaseSpatiaLite = declarative_base(metadata=Metadata)

# revision identifiers, used by Alembic.
revision = "e752bda39400"
down_revision = "6c1e62ee267f"
branch_labels = None
depends_on = None


#
# This has been manually edited from the autogenerated script
# as Alembic doesn't pick up column renames properly
# See https://github.com/miguelgrinberg/Flask-Migrate/issues/30


def upgrade():
    class ClassificationTypeUpgrade(BaseSpatiaLite):
        __tablename__ = constants.CLASSIFICATION_TYPE
        table_type = TableTypes.REFERENCE
        table_type_id = 19

        class_type_id = Column(UUIDType, primary_key=True, default=uuid4)
        class_type = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    class ContactTypeUpgrade(BaseSpatiaLite):
        __tablename__ = constants.CONTACT_TYPE
        table_type = TableTypes.REFERENCE
        table_type_id = 20

        contact_type_id = Column(UUIDType, primary_key=True, default=uuid4)
        contact_type = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    class ConfidenceLevelUpgrade(BaseSpatiaLite):
        __tablename__ = constants.CONFIDENCE_LEVEL
        table_type = TableTypes.REFERENCE
        table_type_id = 27

        confidence_level_id = Column(UUIDType, primary_key=True, default=uuid4)
        level = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("ClassificationTypes", schema=None) as batch_op:
        batch_op.alter_column(column_name="class_type", new_column_name="name")
        batch_op.create_unique_constraint(batch_op.f("uq_ClassificationTypes_name"), ["name"])
        batch_op.drop_constraint("uq_ClassificationTypes_class_type", type_="unique")

    with op.batch_alter_table("ConfidenceLevels", schema=None) as batch_op:
        batch_op.alter_column(column_name="level", new_column_name="name")
        batch_op.create_unique_constraint(batch_op.f("uq_ConfidenceLevels_name"), ["name"])
        batch_op.drop_constraint("uq_ConfidenceLevels_level", type_="unique")

    with op.batch_alter_table("ContactTypes", schema=None) as batch_op:
        batch_op.alter_column(column_name="contact_type", new_column_name="name")
        batch_op.create_unique_constraint(batch_op.f("uq_ContactTypes_name"), ["name"])
        batch_op.drop_constraint("uq_ContactTypes_contact_type", type_="unique")

    # ### end Alembic commands ###


def downgrade():
    class ClassificationTypeDowngrade(BaseSpatiaLite):
        __tablename__ = constants.CLASSIFICATION_TYPE
        table_type = TableTypes.REFERENCE
        table_type_id = 19

        class_type_id = Column(UUIDType, primary_key=True, default=uuid4)
        name = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    class ContactTypeDowngrade(BaseSpatiaLite):
        __tablename__ = constants.CONTACT_TYPE
        table_type = TableTypes.REFERENCE
        table_type_id = 20

        contact_type_id = Column(UUIDType, primary_key=True, default=uuid4)
        name = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    class ConfidenceLevelDowngrade(BaseSpatiaLite):
        __tablename__ = constants.CONFIDENCE_LEVEL
        table_type = TableTypes.REFERENCE
        table_type_id = 27

        confidence_level_id = Column(UUIDType, primary_key=True, default=uuid4)
        name = Column(String(150), nullable=False, unique=True)
        created_date = Column(DateTime, default=datetime.utcnow)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        "ContactTypes", schema=None, copy_from=ContactTypeDowngrade.__table__
    ) as batch_op:
        batch_op.alter_column(column_name="name", new_column_name="contact_type")
        batch_op.create_unique_constraint("uq_ContactTypes_contact_type", ["contact_type"])
        batch_op.drop_constraint(batch_op.f("uq_ContactTypes_name"), type_="unique")

    with op.batch_alter_table(
        "ConfidenceLevels", schema=None, copy_from=ConfidenceLevelDowngrade.__table__
    ) as batch_op:
        batch_op.alter_column(column_name="name", new_column_name="level")
        batch_op.create_unique_constraint("uq_ConfidenceLevels_level", ["level"])
        batch_op.drop_constraint(batch_op.f("uq_ConfidenceLevels_name"), type_="unique")

    with op.batch_alter_table(
        "ClassificationTypes", schema=None, copy_from=ClassificationTypeDowngrade.__table__
    ) as batch_op:
        batch_op.alter_column(column_name="name", new_column_name="class_type")
        batch_op.create_unique_constraint("uq_ClassificationTypes_class_type", ["class_type"])
        batch_op.drop_constraint(batch_op.f("uq_ClassificationTypes_name"), type_="unique")

    # ### end Alembic commands ###
