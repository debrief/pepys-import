"""Remove Tasks and Participants, add new series/wargame/etc.

Revision ID: 7cd744358c83
Revises: 6754c33dca6d
Create Date: 2021-04-11 08:12:50.117428+00:00

"""
import sqlalchemy as sa
from alembic import op

import pepys_import

# revision identifiers, used by Alembic.
revision = "7cd744358c83"
down_revision = "6754c33dca6d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ForceTypes",
        sa.Column(
            "force_type_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("color", sa.String(length=10), nullable=True),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("force_type_id", name=op.f("pk_ForceTypes")),
        sa.UniqueConstraint("name", name=op.f("uq_ForceTypes_name")),
    )
    op.create_table(
        "Series",
        sa.Column(
            "series_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column(
            "privacy_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["Privacies.privacy_id"],
            name=op.f("fk_Series_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("series_id", name=op.f("pk_Series")),
    )
    op.create_table(
        "Wargames",
        sa.Column(
            "wargame_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column(
            "series_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("start", sa.TIMESTAMP(), nullable=False),
        sa.Column("end", sa.TIMESTAMP(), nullable=False),
        sa.Column(
            "privacy_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["Privacies.privacy_id"],
            name=op.f("fk_Wargames_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["series_id"],
            ["Series.series_id"],
            name=op.f("fk_Wargames_series_id_Series"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("wargame_id", name=op.f("pk_Wargames")),
    )
    op.create_table(
        "Serials",
        sa.Column(
            "serial_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column(
            "wargame_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("serial_number", sa.String(length=150), nullable=False),
        sa.Column("start", sa.TIMESTAMP(), nullable=False),
        sa.Column("end", sa.TIMESTAMP(), nullable=False),
        sa.Column("exercise", sa.String(length=150), nullable=True),
        sa.Column("environment", sa.String(length=150), nullable=True),
        sa.Column("location", sa.String(length=150), nullable=True),
        sa.Column(
            "privacy_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["Privacies.privacy_id"],
            name=op.f("fk_Serials_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_id"],
            ["Wargames.wargame_id"],
            name=op.f("fk_Serials_wargame_id_Wargames"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("serial_id", name=op.f("pk_Serials")),
    )
    op.create_table(
        "WargameParticipants",
        sa.Column(
            "wargame_participant_id",
            pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            nullable=False,
        ),
        sa.Column(
            "wargame_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column(
            "platform_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column(
            "privacy_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["Platforms.platform_id"],
            name=op.f("fk_WargameParticipants_platform_id_Platforms"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["Privacies.privacy_id"],
            name=op.f("fk_WargameParticipants_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_id"],
            ["Wargames.wargame_id"],
            name=op.f("fk_WargameParticipants_wargame_id_Wargames"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("wargame_participant_id", name=op.f("pk_WargameParticipants")),
    )
    op.create_table(
        "SerialParticipants",
        sa.Column(
            "serial_participant_id",
            pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            nullable=False,
        ),
        sa.Column(
            "wargame_participant_id",
            pepys_import.utils.sqlalchemy_utils.UUIDType(length=16),
            nullable=False,
        ),
        sa.Column(
            "serial_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("start", sa.TIMESTAMP(), nullable=True),
        sa.Column("end", sa.TIMESTAMP(), nullable=True),
        sa.Column(
            "force_type_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=False
        ),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["force_type_id"],
            ["ForceTypes.force_type_id"],
            name=op.f("fk_SerialParticipants_force_type_id_ForceTypes"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["serial_id"],
            ["Serials.serial_id"],
            name=op.f("fk_SerialParticipants_serial_id_Serials"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_participant_id"],
            ["WargameParticipants.wargame_participant_id"],
            name=op.f("fk_SerialParticipants_wargame_participant_id_WargameParticipants"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("serial_participant_id", name=op.f("pk_SerialParticipants")),
    )
    op.drop_table("Participants")
    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "serial_id", pepys_import.utils.sqlalchemy_utils.UUIDType(length=16), nullable=True
            )
        )
        # batch_op.drop_constraint("fk_Geometries_task_id_Tasks", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_serial_id_Serials"),
            "Serials",
            ["serial_id"],
            ["serial_id"],
            onupdate="cascade",
            ondelete="cascade",
        )
        batch_op.drop_column("task_id")

    with op.batch_alter_table("PlatformTypes", schema=None) as batch_op:
        batch_op.add_column(sa.Column("default_data_interval_secs", sa.Integer()))
    op.drop_table("Tasks")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("PlatformTypes", schema=None) as batch_op:
        batch_op.drop_column("default_data_interval_secs")

    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.add_column(sa.Column("task_id", sa.CHAR(length=32), nullable=True))
        batch_op.drop_constraint(batch_op.f("fk_Geometries_serial_id_Serials"), type_="foreignkey")
        batch_op.create_foreign_key(
            None, "Tasks", ["task_id"], ["task_id"], onupdate="CASCADE", ondelete="CASCADE"
        )
        batch_op.drop_column("serial_id")

    op.create_table(
        "Tasks",
        sa.Column("task_id", sa.CHAR(length=32), nullable=False),
        sa.Column("name", sa.VARCHAR(length=150), nullable=False),
        sa.Column("parent_id", sa.CHAR(length=32), nullable=True),
        sa.Column("start", sa.TIMESTAMP(), nullable=False),
        sa.Column("end", sa.TIMESTAMP(), nullable=False),
        sa.Column("environment", sa.VARCHAR(length=150), nullable=True),
        sa.Column("location", sa.VARCHAR(length=150), nullable=True),
        sa.Column("privacy_id", sa.CHAR(length=32), nullable=False),
        sa.Column("created_date", sa.DATETIME(), nullable=True),
        sa.Column("exercise", sa.VARCHAR(length=150), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["Tasks.task_id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"], ["Privacies.privacy_id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("task_id"),
        sa.UniqueConstraint("name", "parent_id", name="uq_Task_name_parent_id"),
    )
    op.create_table(
        "Participants",
        sa.Column("participant_id", sa.CHAR(length=32), nullable=False),
        sa.Column("platform_id", sa.CHAR(length=32), nullable=False),
        sa.Column("task_id", sa.CHAR(length=32), nullable=False),
        sa.Column("start", sa.TIMESTAMP(), nullable=True),
        sa.Column("end", sa.TIMESTAMP(), nullable=True),
        sa.Column("force", sa.VARCHAR(length=150), nullable=True),
        sa.Column("privacy_id", sa.CHAR(length=32), nullable=False),
        sa.Column("created_date", sa.DATETIME(), nullable=True),
        sa.ForeignKeyConstraint(
            ["platform_id"], ["Platforms.platform_id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"], ["Privacies.privacy_id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["task_id"], ["Tasks.task_id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("participant_id"),
    )
    op.drop_table("SerialParticipants")
    op.drop_table("WargameParticipants")
    op.drop_table("Serials")
    op.drop_table("Wargames")
    op.drop_table("Series")
    op.drop_table("ForceTypes")
    # ### end Alembic commands ###
