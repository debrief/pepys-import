"""Change pennant to identifier and make required

Revision ID: f103f27c4575
Revises: 480d1f29560f
Create Date: 2020-06-03 15:01:57.885447

"""
from datetime import datetime
from uuid import uuid4

from alembic import op
from sqlalchemy import Column, DateTime, ForeignKey, Integer, MetaData, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import (  # used to defer fetching attributes unless it's specifically called
    deferred,
)

import pepys_import
from pepys_import.core.store import constants
from pepys_import.core.store.common_db import PlatformMixin
from pepys_import.core.store.db_base import sqlite_naming_convention
from pepys_import.core.store.db_status import TableTypes
from pepys_import.utils.sqlalchemy_utils import UUIDType

Metadata = MetaData(naming_convention=sqlite_naming_convention)
BaseSpatiaLite = declarative_base(metadata=Metadata)


class PlatformType(BaseSpatiaLite):
    __tablename__ = constants.PLATFORM_TYPE
    table_type = TableTypes.REFERENCE
    table_type_id = 13

    platform_type_id = Column(UUIDType, primary_key=True, default=uuid4)
    name = Column(String(150), nullable=False, unique=True)
    created_date = Column(DateTime, default=datetime.utcnow)


class Nationality(BaseSpatiaLite):
    __tablename__ = constants.NATIONALITY
    table_type = TableTypes.REFERENCE
    table_type_id = 14

    nationality_id = Column(UUIDType, primary_key=True, default=uuid4)
    name = Column(String(150), nullable=False, unique=True)
    priority = Column(Integer)
    created_date = Column(DateTime, default=datetime.utcnow)


class Privacy(BaseSpatiaLite):
    __tablename__ = constants.PRIVACY
    table_type = TableTypes.REFERENCE
    table_type_id = 22

    privacy_id = Column(UUIDType, primary_key=True, default=uuid4)
    name = Column(String(150), nullable=False, unique=True)
    level = Column(Integer, nullable=False)
    created_date = Column(DateTime, default=datetime.utcnow)


# revision identifiers, used by Alembic.
revision = "f103f27c4575"
down_revision = "480d1f29560f"
branch_labels = None
depends_on = None


def upgrade():
    class Platform(BaseSpatiaLite, PlatformMixin):
        __tablename__ = constants.PLATFORM
        table_type = TableTypes.METADATA
        table_type_id = 3

        platform_id = Column(UUIDType, primary_key=True, default=uuid4)
        name = Column(String(150), nullable=False)
        pennant = deferred(Column(String(10), nullable=False))
        trigraph = deferred(Column(String(3)))
        quadgraph = deferred(Column(String(4)))
        nationality_id = Column(
            UUIDType, ForeignKey("Nationalities.nationality_id"), nullable=False
        )
        platform_type_id = Column(
            UUIDType, ForeignKey("PlatformTypes.platform_type_id"), nullable=False
        )
        privacy_id = Column(UUIDType, ForeignKey("Privacies.privacy_id"), nullable=False)
        created_date = Column(DateTime, default=datetime.utcnow)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Platforms", schema=None, copy_from=Platform.__table__) as batch_op:
        batch_op.alter_column(column_name="pennant", new_column_name="identifier", nullable=False)
    # ### end Alembic commands ###


def downgrade():
    class Platform(BaseSpatiaLite, PlatformMixin):
        __tablename__ = constants.PLATFORM
        table_type = TableTypes.METADATA
        table_type_id = 3

        platform_id = Column(UUIDType, primary_key=True, default=uuid4)
        name = Column(String(150), nullable=False)
        identifier = deferred(Column(String(10), nullable=False))
        trigraph = deferred(Column(String(3)))
        quadgraph = deferred(Column(String(4)))
        nationality_id = Column(
            UUIDType, ForeignKey("Nationalities.nationality_id"), nullable=False
        )
        platform_type_id = Column(
            UUIDType, ForeignKey("PlatformTypes.platform_type_id"), nullable=False
        )
        privacy_id = Column(UUIDType, ForeignKey("Privacies.privacy_id"), nullable=False)
        created_date = Column(DateTime, default=datetime.utcnow)

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Platforms", schema=None, copy_from=Platform.__table__) as batch_op:
        batch_op.alter_column(column_name="identifier", new_column_name="pennant", nullable=True)
    # ### end Alembic commands ###
