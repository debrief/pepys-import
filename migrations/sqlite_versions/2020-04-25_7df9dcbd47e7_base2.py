"""base2

Revision ID: 7df9dcbd47e7
Revises: bcff0ccb4fbd
Create Date: 2020-04-23 12:26:51.084226

"""
from datetime import datetime
from uuid import uuid4

import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geometry
from sqlalchemy import Column, DateTime, ForeignKey, MetaData, String
from sqlalchemy.dialects.sqlite import TIMESTAMP
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import (  # used to defer fetching attributes unless it's specifically called
    deferred,
)

from pepys_import.core.store import constants
from pepys_import.core.store.common_db import GeometryMixin
from pepys_import.core.store.db_base import sqlite_naming_convention
from pepys_import.core.store.db_status import TableTypes
from pepys_import.utils.sqlalchemy_utils import UUIDType

Metadata = MetaData(naming_convention=sqlite_naming_convention)
BaseSpatiaLite = declarative_base(metadata=Metadata)


class Geometry1(BaseSpatiaLite, GeometryMixin):
    __tablename__ = constants.GEOMETRY
    table_type = TableTypes.MEASUREMENT
    table_type_id = 33

    geometry_id = Column(UUIDType, primary_key=True, default=uuid4)
    geometry = deferred(Column(Geometry(geometry_type="GEOMETRY", management=True), nullable=False))
    name = Column(String(150), nullable=False)
    geo_type_id = Column(UUIDType, ForeignKey("GeometryTypes.geo_type_id"), nullable=False)
    geo_sub_type_id = Column(
        UUIDType, ForeignKey("GeometrySubTypes.geo_sub_type_id"), nullable=False
    )
    start = Column(TIMESTAMP)
    end = Column(TIMESTAMP)
    task_id = Column(UUIDType, ForeignKey("Tasks.task_id"))
    subject_platform_id = Column(UUIDType, ForeignKey("Platforms.platform_id"))
    sensor_platform_id = Column(UUIDType, ForeignKey("Platforms.platform_id"))
    source_id = Column(UUIDType, ForeignKey("Datafiles.datafile_id"), nullable=False)
    privacy_id = Column(UUIDType, ForeignKey("Privacies.privacy_id"))
    created_date = Column(DateTime, default=datetime.utcnow)


# revision identifiers, used by Alembic.
revision = "7df9dcbd47e7"
down_revision = "bcff0ccb4fbd"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Geometries", schema=None, copy_from=Geometry1.__table__) as batch_op:
        batch_op.alter_column("geometry", existing_type=sa.NUMERIC(), nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Geometries", schema=None, copy_from=Geometry1.__table__) as batch_op:
        batch_op.alter_column("geometry", existing_type=sa.NUMERIC(), nullable=True)

    # ### end Alembic commands ###
