"""Remove Tasks and Participants, add new series/wargame/etc.

Revision ID: d33214dcb984
Revises: 004bd2e9fce4
Create Date: 2021-04-11 18:51:59.761471+00:00

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d33214dcb984"
down_revision = "004bd2e9fce4"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ForceTypes",
        sa.Column("force_type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("color", sa.String(length=10), nullable=True),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("force_type_id", name=op.f("pk_ForceTypes")),
        sa.UniqueConstraint("name", name=op.f("uq_ForceTypes_name")),
        schema="pepys",
    )
    op.create_table(
        "Series",
        sa.Column("series_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("privacy_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name=op.f("fk_Series_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("series_id", name=op.f("pk_Series")),
        schema="pepys",
    )
    op.create_table(
        "Wargames",
        sa.Column("wargame_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("series_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("start", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("end", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("privacy_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name=op.f("fk_Wargames_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["series_id"],
            ["pepys.Series.series_id"],
            name=op.f("fk_Wargames_series_id_Series"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("wargame_id", name=op.f("pk_Wargames")),
        schema="pepys",
    )
    op.create_table(
        "Serials",
        sa.Column("serial_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("wargame_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("serial_number", sa.String(length=150), nullable=False),
        sa.Column("start", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("end", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("environment", sa.String(length=150), nullable=True),
        sa.Column("location", sa.String(length=150), nullable=True),
        sa.Column("exercise", sa.String(length=150), nullable=True),
        sa.Column("privacy_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name=op.f("fk_Serials_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_id"],
            ["pepys.Wargames.wargame_id"],
            name=op.f("fk_Serials_wargame_id_Wargames"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("serial_id", name=op.f("pk_Serials")),
        schema="pepys",
    )
    op.create_table(
        "WargameParticipants",
        sa.Column("wargame_participant_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("wargame_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("platform_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("privacy_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["pepys.Platforms.platform_id"],
            name=op.f("fk_WargameParticipants_platform_id_Platforms"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name=op.f("fk_WargameParticipants_privacy_id_Privacies"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_id"],
            ["pepys.Wargames.wargame_id"],
            name=op.f("fk_WargameParticipants_wargame_id_Wargames"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("wargame_participant_id", name=op.f("pk_WargameParticipants")),
        schema="pepys",
    )
    op.create_table(
        "SerialParticipants",
        sa.Column("serial_participant_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("wargame_participant_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("serial_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("start", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("end", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("force_type_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["force_type_id"],
            ["pepys.ForceTypes.force_type_id"],
            name=op.f("fk_SerialParticipants_force_type_id_ForceTypes"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["serial_id"],
            ["pepys.Serials.serial_id"],
            name=op.f("fk_SerialParticipants_serial_id_Serials"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["wargame_participant_id"],
            ["pepys.WargameParticipants.wargame_participant_id"],
            name=op.f("fk_SerialParticipants_wargame_participant_id_WargameParticipants"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("serial_participant_id", name=op.f("pk_SerialParticipants")),
        schema="pepys",
    )
    op.drop_table("Participants", schema="pepys")
    op.add_column(
        "Geometries",
        sa.Column("serial_id", postgresql.UUID(as_uuid=True), nullable=True),
        schema="pepys",
    )
    op.drop_constraint(
        "fk_Geometries_task_id_Tasks", "Geometries", schema="pepys", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_Geometries_serial_id_Serials"),
        "Geometries",
        "Serials",
        ["serial_id"],
        ["serial_id"],
        source_schema="pepys",
        referent_schema="pepys",
        onupdate="cascade",
        ondelete="cascade",
    )
    op.drop_column("Geometries", "task_id", schema="pepys")
    op.drop_table("Tasks", schema="pepys")
    op.add_column(
        "PlatformTypes",
        sa.Column("default_data_interval_secs", sa.Integer(), nullable=True),
        schema="pepys",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("PlatformTypes", "default_data_interval_secs", schema="pepys")
    op.add_column(
        "Geometries",
        sa.Column("task_id", postgresql.UUID(), autoincrement=False, nullable=True),
        schema="pepys",
    )
    op.drop_constraint(
        op.f("fk_Geometries_serial_id_Serials"), "Geometries", schema="pepys", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_Geometries_task_id_Tasks",
        "Geometries",
        "Tasks",
        ["task_id"],
        ["task_id"],
        source_schema="pepys",
        referent_schema="pepys",
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.drop_column("Geometries", "serial_id", schema="pepys")
    op.create_table(
        "Tasks",
        sa.Column("task_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=150), autoincrement=False, nullable=False),
        sa.Column("parent_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("start", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("end", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("environment", sa.VARCHAR(length=150), autoincrement=False, nullable=True),
        sa.Column("location", sa.VARCHAR(length=150), autoincrement=False, nullable=True),
        sa.Column("privacy_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("exercise", sa.VARCHAR(length=150), autoincrement=False, nullable=True),
        sa.CheckConstraint("(name)::text <> ''::text", name="ck_Tasks_ck_Tasks_name"),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["pepys.Tasks.task_id"],
            name="fk_Tasks_parent_id_Tasks",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name="fk_Tasks_privacy_id_Privacies",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("task_id", name="pk_Tasks"),
        sa.UniqueConstraint("name", "parent_id", name="uq_Task_name_parent_id"),
        schema="pepys",
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "Participants",
        sa.Column("participant_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("platform_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("task_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("start", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("end", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("force", sa.VARCHAR(length=150), autoincrement=False, nullable=True),
        sa.Column("privacy_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["pepys.Platforms.platform_id"],
            name="fk_Participants_platform_id_Platforms",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["privacy_id"],
            ["pepys.Privacies.privacy_id"],
            name="fk_Participants_privacy_id_Privacies",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["pepys.Tasks.task_id"],
            name="fk_Participants_task_id_Tasks",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("participant_id", name="pk_Participants"),
        schema="pepys",
    )
    op.drop_table("SerialParticipants", schema="pepys")
    op.drop_table("WargameParticipants", schema="pepys")
    op.drop_table("Serials", schema="pepys")
    op.drop_table("Wargames", schema="pepys")
    op.drop_table("Series", schema="pepys")
    op.drop_table("ForceTypes", schema="pepys")
    # ### end Alembic commands ###
