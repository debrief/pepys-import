"""Switch to foreign keys for fields in Contacts

Revision ID: 48e601ed0a03
Revises: 2a91be2822a1
Create Date: 2020-05-19 11:40:34.574686

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import pepys_import

# revision identifiers, used by Alembic.
revision = "48e601ed0a03"
down_revision = "2a91be2822a1"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Activations", schema=None) as batch_op:
        batch_op.drop_constraint("Activations_sensor_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Activations_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Activations_privacy_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Activations_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Activations_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Activations_sensor_id_Sensors"),
            "Sensors",
            ["sensor_id"],
            ["sensor_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Comments", schema=None) as batch_op:
        batch_op.drop_constraint("fk_Comments_comment_type_id_CommentTypes", type_="foreignkey")
        batch_op.drop_constraint("Comments_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Comments_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Comments_privacy_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Comments_comment_type_id_CommentTypes"),
            "CommentTypes",
            ["comment_type_id"],
            ["comment_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Comments_platform_id_Platforms"),
            "Platforms",
            ["platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Comments_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Comments_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Contacts", schema=None) as batch_op:
        batch_op.alter_column(
            "classification",
            existing_type=sa.VARCHAR(length=150),
            type_=postgresql.UUID(as_uuid=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "confidence",
            existing_type=sa.VARCHAR(length=150),
            type_=postgresql.UUID(as_uuid=True),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "contact_type",
            existing_type=sa.VARCHAR(length=150),
            type_=postgresql.UUID(as_uuid=True),
            existing_nullable=True,
        )
        batch_op.drop_constraint("Contacts_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Contacts_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Contacts_sensor_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Contacts_subject_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_confidence_ConfidenceLevels"),
            "ConfidenceLevels",
            ["confidence"],
            ["confidence_level_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_sensor_id_Sensors"),
            "Sensors",
            ["sensor_id"],
            ["sensor_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_classification_ClassificationTypes"),
            "ClassificationTypes",
            ["classification"],
            ["class_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_subject_id_Platforms"),
            "Platforms",
            ["subject_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Contacts_contact_type_ContactTypes"),
            "ContactTypes",
            ["contact_type"],
            ["contact_type_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Datafiles", schema=None) as batch_op:
        batch_op.drop_constraint("Datafiles_datafile_type_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Datafiles_privacy_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Datafiles_datafile_type_id_DatafileTypes"),
            "DatafileTypes",
            ["datafile_type_id"],
            ["datafile_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Datafiles_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.drop_constraint("Geometries_geo_sub_type_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Geometries_sensor_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Geometries_geo_type_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Geometries_subject_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Geometries_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Geometries_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("fk_Geometries_task_id_Tasks", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_geo_type_id_GeometryTypes"),
            "GeometryTypes",
            ["geo_type_id"],
            ["geo_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_sensor_platform_id_Platforms"),
            "Platforms",
            ["sensor_platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_subject_platform_id_Platforms"),
            "Platforms",
            ["subject_platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_geo_sub_type_id_GeometrySubTypes"),
            "GeometrySubTypes",
            ["geo_sub_type_id"],
            ["geo_sub_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_task_id_Tasks"),
            "Tasks",
            ["task_id"],
            ["task_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Geometries_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("HostedBy", schema=None) as batch_op:
        batch_op.drop_constraint("HostedBy_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("HostedBy_host_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("HostedBy_subject_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_HostedBy_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_HostedBy_host_id_Platforms"),
            "Platforms",
            ["host_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_HostedBy_subject_id_Platforms"),
            "Platforms",
            ["subject_id"],
            ["platform_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Logs", schema=None) as batch_op:
        batch_op.drop_constraint("Logs_change_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Logs_change_id_Changes"),
            "Changes",
            ["change_id"],
            ["change_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("LogsHoldings", schema=None) as batch_op:
        batch_op.drop_constraint("LogsHoldings_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("LogsHoldings_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("LogsHoldings_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("fk_LogsHoldings_commodity_id_CommodityTypes", type_="foreignkey")
        batch_op.drop_constraint("LogsHoldings_unit_type_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_LogsHoldings_unit_type_id_UnitTypes"),
            "UnitTypes",
            ["unit_type_id"],
            ["unit_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_LogsHoldings_commodity_id_CommodityTypes"),
            "CommodityTypes",
            ["commodity_id"],
            ["commodity_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_LogsHoldings_platform_id_Platforms"),
            "Platforms",
            ["platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_LogsHoldings_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_LogsHoldings_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Media", schema=None) as batch_op:
        batch_op.drop_constraint("Media_subject_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Media_sensor_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Media_source_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Media_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Media_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("fk_Media_media_type_id_MediaTypes", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_subject_id_Platforms"),
            "Platforms",
            ["subject_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_sensor_id_Sensors"),
            "Sensors",
            ["sensor_id"],
            ["sensor_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_platform_id_Platforms"),
            "Platforms",
            ["platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Media_media_type_id_MediaTypes"),
            "MediaTypes",
            ["media_type_id"],
            ["media_type_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Participants", schema=None) as batch_op:
        batch_op.drop_constraint("Participants_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Participants_platform_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Participants_task_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Participants_platform_id_Platforms"),
            "Platforms",
            ["platform_id"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Participants_task_id_Tasks"),
            "Tasks",
            ["task_id"],
            ["task_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Participants_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Platforms", schema=None) as batch_op:
        batch_op.drop_constraint("Platforms_nationality_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Platforms_platform_type_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Platforms_privacy_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Platforms_platform_type_id_PlatformTypes"),
            "PlatformTypes",
            ["platform_type_id"],
            ["platform_type_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Platforms_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Platforms_nationality_id_Nationalities"),
            "Nationalities",
            ["nationality_id"],
            ["nationality_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Sensors", schema=None) as batch_op:
        batch_op.drop_constraint("Sensors_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Sensors_sensor_type_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Sensors_host_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Sensors_host_Platforms"),
            "Platforms",
            ["host"],
            ["platform_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Sensors_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Sensors_sensor_type_id_SensorTypes"),
            "SensorTypes",
            ["sensor_type_id"],
            ["sensor_type_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("States", schema=None) as batch_op:
        batch_op.drop_constraint("States_privacy_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("States_sensor_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("States_source_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_States_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_States_sensor_id_Sensors"),
            "Sensors",
            ["sensor_id"],
            ["sensor_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_States_source_id_Datafiles"),
            "Datafiles",
            ["source_id"],
            ["datafile_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("TaggedItems", schema=None) as batch_op:
        batch_op.drop_constraint("TaggedItems_tag_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("TaggedItems_tagged_by_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_TaggedItems_tag_id_Tags"),
            "Tags",
            ["tag_id"],
            ["tag_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_TaggedItems_tagged_by_id_Users"),
            "Users",
            ["tagged_by_id"],
            ["user_id"],
            referent_schema="pepys",
        )

    with op.batch_alter_table("Tasks", schema=None) as batch_op:
        batch_op.drop_constraint("Tasks_parent_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("Tasks_privacy_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_Tasks_parent_id_Tasks"),
            "Tasks",
            ["parent_id"],
            ["task_id"],
            referent_schema="pepys",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_Tasks_privacy_id_Privacies"),
            "Privacies",
            ["privacy_id"],
            ["privacy_id"],
            referent_schema="pepys",
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("Tasks", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_Tasks_privacy_id_Privacies"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Tasks_parent_id_Tasks"), type_="foreignkey")
        batch_op.create_foreign_key(
            "Tasks_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key("Tasks_parent_id_fkey", "Tasks", ["parent_id"], ["task_id"])

    with op.batch_alter_table("TaggedItems", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_TaggedItems_tagged_by_id_Users"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_TaggedItems_tag_id_Tags"), type_="foreignkey")
        batch_op.create_foreign_key(
            "TaggedItems_tagged_by_id_fkey", "Users", ["tagged_by_id"], ["user_id"]
        )
        batch_op.create_foreign_key("TaggedItems_tag_id_fkey", "Tags", ["tag_id"], ["tag_id"])

    with op.batch_alter_table("States", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_States_source_id_Datafiles"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_States_sensor_id_Sensors"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_States_privacy_id_Privacies"), type_="foreignkey")
        batch_op.create_foreign_key(
            "States_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "States_sensor_id_fkey", "Sensors", ["sensor_id"], ["sensor_id"]
        )
        batch_op.create_foreign_key(
            "States_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )

    with op.batch_alter_table("Sensors", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Sensors_sensor_type_id_SensorTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Sensors_privacy_id_Privacies"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Sensors_host_Platforms"), type_="foreignkey")
        batch_op.create_foreign_key("Sensors_host_fkey", "Platforms", ["host"], ["platform_id"])
        batch_op.create_foreign_key(
            "Sensors_sensor_type_id_fkey", "SensorTypes", ["sensor_type_id"], ["sensor_type_id"]
        )
        batch_op.create_foreign_key(
            "Sensors_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )

    with op.batch_alter_table("Platforms", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Platforms_nationality_id_Nationalities"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Platforms_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Platforms_platform_type_id_PlatformTypes"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "Platforms_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Platforms_platform_type_id_fkey",
            "PlatformTypes",
            ["platform_type_id"],
            ["platform_type_id"],
        )
        batch_op.create_foreign_key(
            "Platforms_nationality_id_fkey", "Nationalities", ["nationality_id"], ["nationality_id"]
        )

    with op.batch_alter_table("Participants", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Participants_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Participants_task_id_Tasks"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Participants_platform_id_Platforms"), type_="foreignkey"
        )
        batch_op.create_foreign_key("Participants_task_id_fkey", "Tasks", ["task_id"], ["task_id"])
        batch_op.create_foreign_key(
            "Participants_platform_id_fkey", "Platforms", ["platform_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "Participants_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )

    with op.batch_alter_table("Media", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Media_media_type_id_MediaTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Media_privacy_id_Privacies"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Media_platform_id_Platforms"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Media_source_id_Datafiles"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Media_sensor_id_Sensors"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Media_subject_id_Platforms"), type_="foreignkey")
        batch_op.create_foreign_key(
            "fk_Media_media_type_id_MediaTypes", "MediaTypes", ["media_type_id"], ["media_type_id"]
        )
        batch_op.create_foreign_key(
            "Media_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Media_platform_id_fkey", "Platforms", ["platform_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "Media_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key("Media_sensor_id_fkey", "Sensors", ["sensor_id"], ["sensor_id"])
        batch_op.create_foreign_key(
            "Media_subject_id_fkey", "Platforms", ["subject_id"], ["platform_id"]
        )

    with op.batch_alter_table("LogsHoldings", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_LogsHoldings_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_LogsHoldings_source_id_Datafiles"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_LogsHoldings_platform_id_Platforms"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_LogsHoldings_commodity_id_CommodityTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_LogsHoldings_unit_type_id_UnitTypes"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "LogsHoldings_unit_type_id_fkey", "UnitTypes", ["unit_type_id"], ["unit_type_id"]
        )
        batch_op.create_foreign_key(
            "fk_LogsHoldings_commodity_id_CommodityTypes",
            "CommodityTypes",
            ["commodity_id"],
            ["commodity_type_id"],
        )
        batch_op.create_foreign_key(
            "LogsHoldings_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "LogsHoldings_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "LogsHoldings_platform_id_fkey", "Platforms", ["platform_id"], ["platform_id"]
        )

    with op.batch_alter_table("Logs", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_Logs_change_id_Changes"), type_="foreignkey")
        batch_op.create_foreign_key("Logs_change_id_fkey", "Changes", ["change_id"], ["change_id"])

    with op.batch_alter_table("HostedBy", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_HostedBy_subject_id_Platforms"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_HostedBy_host_id_Platforms"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_HostedBy_privacy_id_Privacies"), type_="foreignkey")
        batch_op.create_foreign_key(
            "HostedBy_subject_id_fkey", "Platforms", ["subject_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "HostedBy_host_id_fkey", "Platforms", ["host_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "HostedBy_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )

    with op.batch_alter_table("Geometries", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_source_id_Datafiles"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Geometries_task_id_Tasks"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_geo_sub_type_id_GeometrySubTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_subject_platform_id_Platforms"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_sensor_platform_id_Platforms"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Geometries_geo_type_id_GeometryTypes"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "fk_Geometries_task_id_Tasks", "Tasks", ["task_id"], ["task_id"]
        )
        batch_op.create_foreign_key(
            "Geometries_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Geometries_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "Geometries_subject_platform_id_fkey",
            "Platforms",
            ["subject_platform_id"],
            ["platform_id"],
        )
        batch_op.create_foreign_key(
            "Geometries_geo_type_id_fkey", "GeometryTypes", ["geo_type_id"], ["geo_type_id"]
        )
        batch_op.create_foreign_key(
            "Geometries_sensor_platform_id_fkey",
            "Platforms",
            ["sensor_platform_id"],
            ["platform_id"],
        )
        batch_op.create_foreign_key(
            "Geometries_geo_sub_type_id_fkey",
            "GeometrySubTypes",
            ["geo_sub_type_id"],
            ["geo_sub_type_id"],
        )

    with op.batch_alter_table("Datafiles", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Datafiles_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Datafiles_datafile_type_id_DatafileTypes"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "Datafiles_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Datafiles_datafile_type_id_fkey",
            "DatafileTypes",
            ["datafile_type_id"],
            ["datafile_type_id"],
        )

    with op.batch_alter_table("Contacts", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_Contacts_contact_type_ContactTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Contacts_subject_id_Platforms"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Contacts_privacy_id_Privacies"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Contacts_classification_ClassificationTypes"), type_="foreignkey"
        )
        batch_op.drop_constraint(batch_op.f("fk_Contacts_sensor_id_Sensors"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Contacts_source_id_Datafiles"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Contacts_confidence_ConfidenceLevels"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "Contacts_subject_id_fkey", "Platforms", ["subject_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "Contacts_sensor_id_fkey", "Sensors", ["sensor_id"], ["sensor_id"]
        )
        batch_op.create_foreign_key(
            "Contacts_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "Contacts_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.alter_column(
            "contact_type",
            existing_type=postgresql.UUID(as_uuid=True),
            type_=sa.VARCHAR(length=150),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "confidence",
            existing_type=postgresql.UUID(as_uuid=True),
            type_=sa.VARCHAR(length=150),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "classification",
            existing_type=postgresql.UUID(as_uuid=True),
            type_=sa.VARCHAR(length=150),
            existing_nullable=True,
        )

    with op.batch_alter_table("Comments", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_Comments_privacy_id_Privacies"), type_="foreignkey")
        batch_op.drop_constraint(batch_op.f("fk_Comments_source_id_Datafiles"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Comments_platform_id_Platforms"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Comments_comment_type_id_CommentTypes"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "Comments_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Comments_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "Comments_platform_id_fkey", "Platforms", ["platform_id"], ["platform_id"]
        )
        batch_op.create_foreign_key(
            "fk_Comments_comment_type_id_CommentTypes",
            "CommentTypes",
            ["comment_type_id"],
            ["comment_type_id"],
        )

    with op.batch_alter_table("Activations", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("fk_Activations_sensor_id_Sensors"), type_="foreignkey")
        batch_op.drop_constraint(
            batch_op.f("fk_Activations_privacy_id_Privacies"), type_="foreignkey"
        )
        batch_op.drop_constraint(
            batch_op.f("fk_Activations_source_id_Datafiles"), type_="foreignkey"
        )
        batch_op.create_foreign_key(
            "Activations_privacy_id_fkey", "Privacies", ["privacy_id"], ["privacy_id"]
        )
        batch_op.create_foreign_key(
            "Activations_source_id_fkey", "Datafiles", ["source_id"], ["datafile_id"]
        )
        batch_op.create_foreign_key(
            "Activations_sensor_id_fkey", "Sensors", ["sensor_id"], ["sensor_id"]
        )

    # ### end Alembic commands ###
